// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943

package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Layout(content templ.Component) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>GuPoroca </title><link rel=\"icon\" href=\"/favicon.png\"><!-- Terminal theme --><link href=\"/static/all.css\" rel=\"stylesheet\"><link href=\"/static/colors.css\" rel=\"stylesheet\"><!-- HTMX --><script src=\"https://unpkg.com/htmx.org@1.9.10\"></script></head><body><!-- Navbar --><nav class=\"navbar__inner\" style=\" margin: 0 auto; padding: 0.75 3rem;\"><!-- Left --><div class=\"navbar__left\"><a href=\"/blog\" class=\"logo\">Home</a></div><!-- Middle (tags) --><div class=\"navbar__center\"><ul class=\"navbar__menu\"><li><a href=\"/blog?tag=apollo\">Apollo</a></li><li><a href=\"/blog?tag=athena\">Athena</a></li><li><a href=\"/blog?tag=daedalus\">Daedalus</a></li><li><a href=\"/blog?tag=hephaestus\">Hephaestus</a></li></ul><select class=\"navbar__menu--dropdown\" id=\"menu-dropdown\"><option value=\"\" disabled selected>Tag</option><!-- placeholder --><option value=\"/blog?tag=apollo\">Apollo</option> <option value=\"/blog?tag=athena\">Athena</option> <option value=\"/blog?tag=daedalus\">Daedalus</option> <option value=\"/blog?tag=Hephaestus\">Hephaestus</option></select></div><!-- Right --><div class=\"navbar__right\"><select id=\"lang-switch\" class=\"lang-select\"><option value=\"en\">English</option> <option value=\"br\">PortuguÃªs</option></select></div></nav><main id=\"main-content\" class=\"content\" style=\"max-width: 900px; margin: 0 auto; padding: 0 3rem;\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = content.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</main><!-- Language Switcher Script --><script>\n\t\t\t(function () {\n\t\t\t  var sel = document.getElementById('lang-switch');\n\n\t\t\t  // Reflect current URL language in the dropdown\n\t\t\t  var m = location.pathname.match(/^\\/(en|br)(?=\\/|$)/);\n\t\t\t  sel.value = m ? m[1] : 'en';\n\n\t\t\t  // On change, swap language prefix but keep the rest of the URL\n\t\t\t  sel.addEventListener('change', function () {\n\t\t\t    var newLang = this.value;\n\n\t\t\t    // Remove current /en or /br prefix if present\n\t\t\t    var path = location.pathname.replace(/^\\/(en|br)(?=\\/|$)/, '');\n\t\t\t    if (path === '' || path === '/') path = '/';\n\n\t\t\t    var newPath = '/' + newLang + (path.startsWith('/') ? '' : '/') + path;\n\n\t\t\t    // Normalize accidental double slashes\n\t\t\t    newPath = newPath.replace(/\\/{2,}/g, '/');\n\n\t\t\t    // Navigate to new URL (preserve query & hash)\n\t\t\t    location.href = newPath + location.search + location.hash;\n\t\t\t  });\n\t\t\t})();\n\t\t\t</script><script>\n  const menuList = document.getElementById(\"menu-list\");\n  const menuDropdown = document.getElementById(\"menu-dropdown\");\n\n  // --- 1. Overflow detector ---\n  function toggleMenu() {\n    const isOverflowing = menuList.scrollWidth > menuList.clientWidth;\n    if (isOverflowing) {\n      menuList.style.display = \"none\";\n      menuDropdown.style.display = \"block\";\n    } else {\n      menuList.style.display = \"flex\";\n      menuDropdown.style.display = \"none\";\n    }\n  }\n\n  window.addEventListener(\"resize\", toggleMenu);\n  window.addEventListener(\"load\", toggleMenu);\n\n  // --- 2. Navigate when selecting option ---\n  menuDropdown.addEventListener(\"change\", function () {\n    if (this.value) {\n      window.location.href = this.value;\n    }\n  });\n\n  // --- 3. Reflect current URL tag in dropdown ---\nconst tagMatch = location.search.match(/tag=([^&]+)/);\nif (tagMatch) {\n  const currentTag = tagMatch[1].toLowerCase();\n  for (let option of menuDropdown.options) {\n    if (option.value.toLowerCase().includes(currentTag)) {\n      menuDropdown.value = option.value;\n      break;\n    }\n  }\n} else {\n  menuDropdown.value = \"\"; // stays on \"Tag\"\n  }\n</script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
